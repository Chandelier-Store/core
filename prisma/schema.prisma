generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  USER
}

model User {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  email      String    @unique
  password   String
  name       String
  phone      String    @default("")
  role       Role      @default(USER)

  cart       Cart?
  orders     Order[]
}

model Faq {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  question   String
  answer     String
}

model Banner {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  image     String   @default("images/default/default_banner.jpg") @map("image_url")
  link      String
  isActive  Boolean  @default(true) @map("is_active")
}

model Product {
  id           String            @id @default(uuid())
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @updatedAt @map("updated_at")
  lastPickedAt DateTime?         @map("last_picked_at")
  name         String            @unique
  slug         String?           @unique
  description  String
  image        String            @default("images/default/default_product.jpg") @map("image_url")
  discount     Float?            @default(0)

  categoryId   String?           @map("category_id")

  category     Category?         @relation(fields: [categoryId], references: [id])
  variants     ProductVariant[]
}

model ProductVariant {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  size       String
  price      Float
  inStock    Boolean   @default(false) @map("in_stock")
  productId  String    @map("product_id")

  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems  CartItem[] 
  orderItems OrderItem[]
}

model Category {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  name       String    @unique
  slug       String?   @unique
  image      String    @default("images/default/default_category.png") @map("image_url")

  products   Product[]
}

model Cart {
  id         String     @id @default(uuid())
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  userId     String     @unique @map("user_id")

  user       User       @relation(fields: [userId], references: [id])
  items      CartItem[]
}

model CartItem {
  id           String          @id @default(uuid())
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime        @updatedAt @map("updated_at")
  quantity     Int
  variantId    String          @map("variant_id")
  cartId       String          @map("cart_id")

  variant      ProductVariant  @relation(fields: [variantId], references: [id])
  cart         Cart            @relation(fields: [cartId], references: [id])
}

model Order {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  userId      String      @map("user_id")
  address     String?
  comment     String?
  totalAmount Float       @default(0) @map("total_amount")

  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[]
}

model OrderItem {
  id           String          @id @default(uuid())
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime        @updatedAt @map("updated_at")
  quantity     Int
  price        Float
  variantId    String          @map("variant_id")
  orderId      String          @map("order_id")

  variant      ProductVariant  @relation(fields: [variantId], references: [id])
  order        Order           @relation(fields: [orderId], references: [id])
}
